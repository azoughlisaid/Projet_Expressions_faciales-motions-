import streamlit as st
import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import torchvision.models as models
import time
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd  

# ‚û°Ô∏è Configurer la page
st.set_page_config(page_title="D√©tecteur d'√âmotions", page_icon="üòä", layout="wide")

# ‚û°Ô∏è Custom CSS pour am√©liorer l'apparence
st.markdown("""
    <style>
    .sidebar .sidebar-content {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
    }
    .stProgress > div > div > div > div {
        background-color: #ff4b4b;
    }
    </style>
""", unsafe_allow_html=True)

# ‚û°Ô∏è D√©finir les classes
classes = ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise']

# ‚û°Ô∏è Charger les m√©triques
confusion_matrix = np.load("confusion_matrix.npy")
model_accuracy = np.load("model_accuracy.npy")[0]

# ‚û°Ô∏è Charger et parser le rapport classification
with open("classification_report.txt", "r") as f:
    classification_report_text = f.read()

# üîµ Fonction pour parser proprement en DataFrame
def parse_classification_report(text_report):
    lines = text_report.strip().split('\n')
    classes_local = []
    metrics = []

    for line in lines[2:-3]:  # On saute l'ent√™te et les moyennes
        tokens = line.split()
        if len(tokens) == 5:
            classe, precision, recall, f1score, support = tokens
            classes_local.append(classe)
            metrics.append([float(precision), float(recall), float(f1score)])

    df = pd.DataFrame(metrics, index=classes_local, columns=['Precision', 'Recall', 'F1-Score'])
    return df

# Appliquer
report_df = parse_classification_report(classification_report_text)

# ‚û°Ô∏è Charger mod√®le sauvegard√©
@st.cache_resource
def load_model():
    model = models.resnet18(weights=None)
    model.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3, bias=False)
    model.fc = nn.Linear(512, 7)
    model.load_state_dict(torch.load("resnet18_fer2013.pth", map_location=torch.device('cpu')))
    model.eval()
    return model

model = load_model()

# ‚û°Ô∏è Fonction de pr√©traitement
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize((48, 48)),
        transforms.Grayscale(num_output_channels=1),
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])
    image = transform(image)
    image = image.unsqueeze(0)
    return image

# ‚û°Ô∏è Fonction pour pr√©dire
def predict(model, image_tensor):
    outputs = model(image_tensor)
    probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
    return probabilities

# ‚û°Ô∏è Sidebar Informations mod√®le
with st.sidebar:
    st.title("üõ†Ô∏è Param√®tres du Mod√®le")
    st.metric(label="üéØ Accuracy Test", value=f"{model_accuracy*100:.2f}%")
    st.markdown("---")
    
    if st.button("üìà Voir la Matrice de Confusion"):
        st.subheader("üìä Matrice de Confusion :")
        fig_cm, ax = plt.subplots(figsize=(8,6))
        sns.heatmap(confusion_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)
        plt.xlabel('Pr√©dictions')
        plt.ylabel('V√©rit√©s')
        st.pyplot(fig_cm)

    if st.button("üìÑ Voir le Rapport de Classification"):
        st.subheader("üìÑ Rapport Precision / Recall / F1-score :")
        st.dataframe(report_df.style.format("{:.2f}"))

    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Infos Mod√®le")
    st.write("Mod√®le : **ResNet18 Fine-tun√©**")
    st.write("Input : **Visage**")

# ‚û°Ô∏è Interface principale
st.title("üòä D√©tecteur Automatique d'√âmotions Faciales")
st.write("Veuillez uploader une image de visage humain pour analyser l'√©motion d√©tect√©e.")

uploaded_file = st.file_uploader("üì§ Upload votre image (formats : jpg, jpeg, png)...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert('RGB')

    col1, col2 = st.columns([1, 3])

    with col2:
        st.image(image, caption="üñºÔ∏è Image Charg√©e", width=400)

    with col1:
        if st.button('üöÄ Analyser l\'√©motion'):
            with st.spinner('üß† Analyse de l\'√©motion...'):
                time.sleep(1)
                image_tensor = preprocess_image(image)
                probabilities = predict(model, image_tensor)
                predicted_class = classes[torch.argmax(probabilities)]

            st.success(f"üåü √âmotion d√©tect√©e : **{predicted_class.upper()}**")
            st.subheader("üìä Scores par √©motion :")
            for idx, prob in enumerate(probabilities):
                st.progress(prob.item(), text=f"{classes[idx]} : {prob:.2%}")
